import * as ppt from "../lib/playwright"

let page = null
let done = null

beforeAll(async () => {
	jest.setTimeout(600e3)
	const browserStr = process.env.BROWSER
	;[page, done] = await ppt.openPage(browserStr, "http://localhost:3000/demo")
})

afterAll(async () => {
	await done()
})

beforeEach(async () => {
	await page.focus("#editor")
	await page.clear()
})

test("can type and backspace words", async () => {
	await page.type("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	let data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, ")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\n")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, ")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\n")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, ")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello")
	await page.backspaceWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("")
})

test("can type and delete words", async () => {
	await page.type("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	let data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.left(52)
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(", world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(" world! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("! ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(" ğŸ˜€\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("\n\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("\nHello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(", world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(" world! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("! ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(" ğŸ˜€\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("\n\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("\nHello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("Hello, world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(", world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(" world! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("! ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe(" ğŸ˜€")
	await page.deleteWord()
	data = await page.getCodex("#editor")
	expect(data).toBe("")
})
